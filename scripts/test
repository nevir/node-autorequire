#!/usr/bin/env node

var exec   = require('child_process').exec
var fs     = require('fs')
var path   = require('path')
var semver = require('semver')


var NVM_DIR      = path.join(process.env.HOME, '.nvm')
var PROJECT_PATH = path.resolve(__dirname, '..')
var PACKAGE_PATH = path.join(PROJECT_PATH, 'package.json')
var TESTS_PATH   = path.join(PROJECT_PATH, 'test')
var VOWS_PATH    = path.join(PROJECT_PATH, 'node_modules', '.bin', 'vows')

try {
  if (!fs.statSync(NVM_DIR).isDirectory()) {
    throw false
  }
} catch(err) {
  throw 'This script expects that you have nvm installed to ' + NVM_DIR
}


function runTests(nodeVer, callback) {
  commands  = 'source ' + NVM_DIR + '/nvm.sh'
  commands += '&& nvm use ' + nodeVer
  commands += '&& ' + VOWS_PATH + ' ' + TESTS_PATH + '/*_test.coffee --isolate'

  // The tests run quickly enough that we don't need to stream stdout.
  exec(commands, callback)
}

function installedNodes() {
  nodes = []
  paths = fs.readdirSync(NVM_DIR)

  for (var i = 0; i < paths.length; i++) {
    if (paths[i].match(/v[\d\.]+/)) {
      nodes.push(paths[i])
    }
  }

  return nodes
}

function targetedNodes() {
  nodes = []

  packageInfo   = JSON.parse(fs.readFileSync(PACKAGE_PATH))
  versionRanges = packageInfo.engines.node.split('||')

  // We assume that each version range is stable for X & Y.
  for (i = 0; i < versionRanges.length; i++) {
    versions = versionRanges[i].match(/v(\d+)\.(\d+)\.(\d+) - v\d+\.\d+\.(\d+)/)
    base     = 'v' + versions[1] + '.' + versions[2] + '.'

    for (z = parseInt(versions[3]); z <= parseInt(versions[4]); z++) {
      nodes.push(base + z)
    }
  }

  return nodes
}

function installMissingNodes(callback) {
  targeted  = targetedNodes()
  installed = installedNodes()
  missing   = []

  for (i = 0; i < targeted.length; i++) {
    var found = false
    for (j = 0; j < installed.length; j++) {
      if (installed[j] == targeted[i]) {
        found = true
      }
    }

    if (!found) {
      missing.push(targeted[i])
    }
  }

  function installNode(versions) {
    toInstall = versions.shift()
    process.stdout.write('Installing missing node ' + toInstall + '... ')

    commands  = 'source ' + NVM_DIR + '/nvm.sh'
    commands += '&& nvm install ' + toInstall

    exec(commands, function(err, stdout, stderr) {
      process.stdout.write('done\n')

      if (versions.length == 0) {
        callback()
      } else {
        installNode(versions)
      }
    })
  }

  if (missing.length == 0) {
    callback()
  } else {
    installNode(missing)
  }
}

function summarize(statuses) {
  passed = []
  failed = []

  for (node in statuses) {
    if (statuses[node]) {
      passed.push(node)
    } else {
      failed.push(node)
    }
  }

  if (passed.length > 0) {
    console.log('The following nodes passed:')
    console.log('  ' + passed.join(', '))
    console.log()
  }

  if (failed.length > 0) {
    console.log('The following nodes failed:')
    console.log('  ' + failed.join(', '))
    console.log()
  }

  process.exit(failed.length == 0 ? 0 : 1)
}


installMissingNodes(function() {
  targeted = targetedNodes()
  statuses = {}

  function handleNode(versions) {
    toRun = versions.shift()
    process.stdout.write('Testing node ' + toRun + '... ')

    runTests(toRun, function(err, stdout, stderr) {
      statuses[toRun] = err === null

      if (err) {
        process.stdout.write('failed:\n')
        console.log(stderr)
        console.log(stdout)
      } else {
        process.stdout.write('passed\n')
      }

      if (versions.length == 0) {
        summarize(statuses)
      } else {
        handleNode(versions)
      }
    })
  }

  handleNode(targeted)
})
